Approach 1: Brute force n^2
Approach 2: Using Math [n*(n+1)/2] and [n*(n+1)*(2n+1)/6]
Approach 3: XOR Bit manipulation


First Most Optimised Approach (Approach 2): 

import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution {

    public static int[] missingAndRepeating(ArrayList<Integer> arr, int n) {
        // Write your code here
        int s1 = (n*(n+1))/2;
        int s2 = 0, s2_sq = 0;
        
        for(int i: arr){
            s2+= i;
            s2_sq += i*i;
        }
        
        int sum_diff = s2 - s1;
        int sum_add = (s2_sq - (s1*(2*n+1))/3)/sum_diff;
        
        int x = (sum_add - sum_diff)/2;        //missing number
        int y = (sum_diff + sum_add)/2;        //repeated number
        
        return new int[] {x,y};
        
    }
}



Most Optimised Approach (Approach 3):

 
    static void getTwoElements(int arr[], int n)
    {
        int xor1;
        
        int set_bit_no;
 
        int i;
        int x = 0;
        int y = 0;
 
        xor1 = arr[0];
 
        for (i = 1; i < n; i++)
            xor1 = xor1 ^ arr[i];
 
        for (i = 1; i <= n; i++)
            xor1 = xor1 ^ i;
 
        set_bit_no = xor1 & ~(xor1 - 1);
 
        for (i = 0; i < n; i++) {
            if ((arr[i] & set_bit_no) != 0)
                x = x ^ arr[i];
 
            else
                y = y ^ arr[i];
        }
        for (i = 1; i <= n; i++) {
            if ((i & set_bit_no) != 0)
                x = x ^ i;
 
            else
                y = y ^ i;
        }
    }
