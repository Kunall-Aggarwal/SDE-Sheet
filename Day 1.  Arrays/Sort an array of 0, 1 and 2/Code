Approach 1: O(n^2)
Approach 2: use any sorting algorithm
Approach 3: use 3 pointer approach



Most Optimised Approach (Approach 3):

class Solution {
    public void sortColors(int[] nums) {
        int low = 0, mid = 0, high = nums.length-1;
        
        while(mid <= high){
            switch(nums[mid]){
                case 0:
                    swap(low, mid, nums);
                    low++;
                    mid++;
                    break;
                case 1:
                    mid++;
                    break;
                case 2:
                    swap(high, mid, nums);
                    high--;
                    break;
            }
        }   
    }
    public void swap(int s, int e, int[] nums){
        int temp = nums[s];
        nums[s] = nums[e];
        nums[e] = temp;
    }
}
