Approach 1: O(n^2)
Approach 2: keeping track of the minimal element at  the left side


Most Optimised Approach (Approach 2):


class Solution {
    public int maxProfit(int[] prices) {
        int max = 0, pre = Integer.MAX_VALUE;
        for(int i = 0 ; i < prices.length; i++){
            pre = Math.min(pre, prices[i]);
            max = Math.max(max, prices[i] - pre);
        }
        return max; 
    }
}
